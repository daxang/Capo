///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class TransferHistoryHistoryDeploy {
/*
{
  "deployer": "043cf11efeeedd91354937062781fcb07975517233c29cdf6709b902a63ea181f6586db140c877daf32c613ce71187b2158fd0e96ac6dadcda3a54267ca88856e6",
  "term": "     new rl(`rho:registry:lookup`), RevVaultCh in {\n    rl!(`rho:rchain:revVault`, *RevVaultCh) |\n    for (@(_, RevVault) <- RevVaultCh) {\n      new vaultCh, vaultTo, revVaultkeyCh,\n        deployerId(`rho:rchain:deployerId`),\n        deployId(`rho:rchain:deployId`)\n      in {\n        match (\"1111eGmqpLbcJ8WfDifdZ2TEqhiMkFvxMo6QjqKvdc6HpkRbZDiZj\", \"11112mmfnqD3UgtpEAmFxVfU6g26W7fdyFgS6dNUpk9ycS2GXYU3pL\", 1000000) {\n          (revAddrFrom, revAddrTo, amount) => {\n            @RevVault!(\"findOrCreate\", revAddrFrom, *vaultCh) |\n            @RevVault!(\"findOrCreate\", revAddrTo, *vaultTo) |\n            @RevVault!(\"deployerAuthKey\", *deployerId, *revVaultkeyCh) |\n            for (@vault <- vaultCh; key <- revVaultkeyCh; _ <- vaultTo) {\n              match vault {\n                (true, vault) => {\n                  new resultCh in {\n                    @vault!(\"transfer\", revAddrTo, amount, *key, *resultCh) |\n                    for (@result <- resultCh) {\n                      match result {\n                        (true , _  ) => deployId!((true, \"Transfer successful.\"))\n                        (false, err) => deployId!((false, err))\n                      }\n                    }\n                  }\n                }\n                err => {\n                  deployId!((false, \"REV vault cannot be found or created.\"))\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  ",
  "timestamp": 1598400491436,
  "sig": "30440220181b67a27368946663c9ae9b213ab6d122866709ff575fc7af0c62d7beef56a202201057dbe661cf2786a666437680a16a0b2a4cffe3b134a8fdc337533d125af377",
  "sigAlgorithm": "secp256k1",
  "phloPrice": 1,
  "phloLimit": 500000,
  "validAfterBlockNumber": 257527,
  "cost": 165120,
  "errored": false,
  "systemDeployError": ""
}
*/

  String deployer;
  String term;
  int timestamp;
  String sig;
  String sigAlgorithm;
  int phloPrice;
  int phloLimit;
  int validAfterBlockNumber;
  int cost;
  bool errored;
  String systemDeployError;

  TransferHistoryHistoryDeploy({
    this.deployer,
    this.term,
    this.timestamp,
    this.sig,
    this.sigAlgorithm,
    this.phloPrice,
    this.phloLimit,
    this.validAfterBlockNumber,
    this.cost,
    this.errored,
    this.systemDeployError,
  });
  TransferHistoryHistoryDeploy.fromJson(Map<String, dynamic> json) {
    deployer = json["deployer"]?.toString();
    term = json["term"]?.toString();
    timestamp = json["timestamp"]?.toInt();
    sig = json["sig"]?.toString();
    sigAlgorithm = json["sigAlgorithm"]?.toString();
    phloPrice = json["phloPrice"]?.toInt();
    phloLimit = json["phloLimit"]?.toInt();
    validAfterBlockNumber = json["validAfterBlockNumber"]?.toInt();
    cost = json["cost"]?.toInt();
    errored = json["errored"];
    systemDeployError = json["systemDeployError"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["deployer"] = deployer;
    data["term"] = term;
    data["timestamp"] = timestamp;
    data["sig"] = sig;
    data["sigAlgorithm"] = sigAlgorithm;
    data["phloPrice"] = phloPrice;
    data["phloLimit"] = phloLimit;
    data["validAfterBlockNumber"] = validAfterBlockNumber;
    data["cost"] = cost;
    data["errored"] = errored;
    data["systemDeployError"] = systemDeployError;
    return data;
  }
}

class TransferHistoryItem {
/*
{
  "fromAddr": "1111eGmqpLbcJ8WfDifdZ2TEqhiMkFvxMo6QjqKvdc6HpkRbZDiZj",
  "toAddr": "11112mmfnqD3UgtpEAmFxVfU6g26W7fdyFgS6dNUpk9ycS2GXYU3pL",
  "amount": 1000000,
  "retUnforeable": "OiQKIgogxmRmXcKdCkQUfv3E3tsXuXcZi1icl5bCrsSora5mbRU=\n",
  "deploy": {
    "deployer": "043cf11efeeedd91354937062781fcb07975517233c29cdf6709b902a63ea181f6586db140c877daf32c613ce71187b2158fd0e96ac6dadcda3a54267ca88856e6",
    "term": "     new rl(`rho:registry:lookup`), RevVaultCh in {\n    rl!(`rho:rchain:revVault`, *RevVaultCh) |\n    for (@(_, RevVault) <- RevVaultCh) {\n      new vaultCh, vaultTo, revVaultkeyCh,\n        deployerId(`rho:rchain:deployerId`),\n        deployId(`rho:rchain:deployId`)\n      in {\n        match (\"1111eGmqpLbcJ8WfDifdZ2TEqhiMkFvxMo6QjqKvdc6HpkRbZDiZj\", \"11112mmfnqD3UgtpEAmFxVfU6g26W7fdyFgS6dNUpk9ycS2GXYU3pL\", 1000000) {\n          (revAddrFrom, revAddrTo, amount) => {\n            @RevVault!(\"findOrCreate\", revAddrFrom, *vaultCh) |\n            @RevVault!(\"findOrCreate\", revAddrTo, *vaultTo) |\n            @RevVault!(\"deployerAuthKey\", *deployerId, *revVaultkeyCh) |\n            for (@vault <- vaultCh; key <- revVaultkeyCh; _ <- vaultTo) {\n              match vault {\n                (true, vault) => {\n                  new resultCh in {\n                    @vault!(\"transfer\", revAddrTo, amount, *key, *resultCh) |\n                    for (@result <- resultCh) {\n                      match result {\n                        (true , _  ) => deployId!((true, \"Transfer successful.\"))\n                        (false, err) => deployId!((false, err))\n                      }\n                    }\n                  }\n                }\n                err => {\n                  deployId!((false, \"REV vault cannot be found or created.\"))\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  ",
    "timestamp": 1598400491436,
    "sig": "30440220181b67a27368946663c9ae9b213ab6d122866709ff575fc7af0c62d7beef56a202201057dbe661cf2786a666437680a16a0b2a4cffe3b134a8fdc337533d125af377",
    "sigAlgorithm": "secp256k1",
    "phloPrice": 1,
    "phloLimit": 500000,
    "validAfterBlockNumber": 257527,
    "cost": 165120,
    "errored": false,
    "systemDeployError": ""
  },
  "success": true,
  "reason": ""
}
*/

  String fromAddr;
  String toAddr;
  int amount;
  String retUnforeable;
  TransferHistoryHistoryDeploy deploy;
  bool success;
  String reason;

  TransferHistoryItem({
    this.fromAddr,
    this.toAddr,
    this.amount,
    this.retUnforeable,
    this.deploy,
    this.success,
    this.reason,
  });
  TransferHistoryItem.fromJson(Map<String, dynamic> json) {
    fromAddr = json["fromAddr"]?.toString();
    toAddr = json["toAddr"]?.toString();
    amount = json["amount"]?.toInt();
    retUnforeable = json["retUnforeable"]?.toString();
    deploy = json["deploy"] != null
        ? TransferHistoryHistoryDeploy.fromJson(json["deploy"])
        : null;
    success = json["success"];
    reason = json["reason"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["fromAddr"] = fromAddr;
    data["toAddr"] = toAddr;
    data["amount"] = amount;
    data["retUnforeable"] = retUnforeable;
    if (deploy != null) {
      data["deploy"] = deploy.toJson();
    }
    data["success"] = success;
    data["reason"] = reason;
    return data;
  }
}

class TransferHistory {
/*
{
  "history": [
    {
      "fromAddr": "1111eGmqpLbcJ8WfDifdZ2TEqhiMkFvxMo6QjqKvdc6HpkRbZDiZj",
      "toAddr": "11112mmfnqD3UgtpEAmFxVfU6g26W7fdyFgS6dNUpk9ycS2GXYU3pL",
      "amount": 1000000,
      "retUnforeable": "OiQKIgogxmRmXcKdCkQUfv3E3tsXuXcZi1icl5bCrsSora5mbRU=\n",
      "deploy": {
        "deployer": "043cf11efeeedd91354937062781fcb07975517233c29cdf6709b902a63ea181f6586db140c877daf32c613ce71187b2158fd0e96ac6dadcda3a54267ca88856e6",
        "term": "     new rl(`rho:registry:lookup`), RevVaultCh in {\n    rl!(`rho:rchain:revVault`, *RevVaultCh) |\n    for (@(_, RevVault) <- RevVaultCh) {\n      new vaultCh, vaultTo, revVaultkeyCh,\n        deployerId(`rho:rchain:deployerId`),\n        deployId(`rho:rchain:deployId`)\n      in {\n        match (\"1111eGmqpLbcJ8WfDifdZ2TEqhiMkFvxMo6QjqKvdc6HpkRbZDiZj\", \"11112mmfnqD3UgtpEAmFxVfU6g26W7fdyFgS6dNUpk9ycS2GXYU3pL\", 1000000) {\n          (revAddrFrom, revAddrTo, amount) => {\n            @RevVault!(\"findOrCreate\", revAddrFrom, *vaultCh) |\n            @RevVault!(\"findOrCreate\", revAddrTo, *vaultTo) |\n            @RevVault!(\"deployerAuthKey\", *deployerId, *revVaultkeyCh) |\n            for (@vault <- vaultCh; key <- revVaultkeyCh; _ <- vaultTo) {\n              match vault {\n                (true, vault) => {\n                  new resultCh in {\n                    @vault!(\"transfer\", revAddrTo, amount, *key, *resultCh) |\n                    for (@result <- resultCh) {\n                      match result {\n                        (true , _  ) => deployId!((true, \"Transfer successful.\"))\n                        (false, err) => deployId!((false, err))\n                      }\n                    }\n                  }\n                }\n                err => {\n                  deployId!((false, \"REV vault cannot be found or created.\"))\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  ",
        "timestamp": 1598400491436,
        "sig": "30440220181b67a27368946663c9ae9b213ab6d122866709ff575fc7af0c62d7beef56a202201057dbe661cf2786a666437680a16a0b2a4cffe3b134a8fdc337533d125af377",
        "sigAlgorithm": "secp256k1",
        "phloPrice": 1,
        "phloLimit": 500000,
        "validAfterBlockNumber": 257527,
        "cost": 165120,
        "errored": false,
        "systemDeployError": ""
      },
      "success": true,
      "reason": ""
    }
  ]
}
*/

  List<TransferHistoryItem> history;

  TransferHistory({
    this.history,
  });
  TransferHistory.fromJson(Map<String, dynamic> json) {
    if (json != null) {
//      var v = json["history"];
      var arr0 = List<TransferHistoryItem>();
      arr0 = json.values.map((e) => TransferHistoryItem.fromJson(e)).toList();
      history = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (history != null) {
      var v = history;
      var arr0 = List();
      v.forEach((v) {
        arr0.add(v.toJson());
      });
      data["history"] = arr0;
    }
    return data;
  }
}
