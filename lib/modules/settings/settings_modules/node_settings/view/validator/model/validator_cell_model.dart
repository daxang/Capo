///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class CoopValidators {
/*
{
  "host": "node15.root-shard.mainnet.rchain.coop",
  "grpc_port": 40401,
  "http_port": 443
}
*/

  String host;
  int grpcPort;
  int httpPort;

  CoopValidators({
    this.host,
    this.grpcPort,
    this.httpPort,
  });
  CoopValidators.fromJson(Map<String, dynamic> json) {
    host = json["host"]?.toString();
    grpcPort = json["grpc_port"]?.toInt();
    httpPort = json["http_port"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["host"] = host;
    data["grpc_port"] = grpcPort;
    data["http_port"] = httpPort;
    return data;
  }
}

class CoopNextToPropose {
/*
{
  "host": "node15.root-shard.mainnet.rchain.coop",
  "grpcPort": 40401,
  "httpPort": 443,
  "latestBlockNumber": 257540
}
*/

  String host;
  int grpcPort;
  int httpPort;
  int latestBlockNumber;

  CoopNextToPropose({
    this.host,
    this.grpcPort,
    this.httpPort,
    this.latestBlockNumber,
  });
  CoopNextToPropose.fromJson(Map<String, dynamic> json) {
    host = json["host"]?.toString();
    grpcPort = json["grpcPort"]?.toInt();
    httpPort = json["httpPort"]?.toInt();
    latestBlockNumber = json["latestBlockNumber"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["host"] = host;
    data["grpcPort"] = grpcPort;
    data["httpPort"] = httpPort;
    data["latestBlockNumber"] = latestBlockNumber;
    return data;
  }
}

class CoopNodes {
/*
{
  "autoSelected": true,
  "selectedNode": {
    "host": "node15.root-shard.mainnet.rchain.coop",
    "grpc_port": 40401,
    "http_port": 443
  },
  "nextToPropose": {
    "host": "node15.root-shard.mainnet.rchain.coop",
    "grpcPort": 40401,
    "httpPort": 443,
    "latestBlockNumber": 257540
  },
  "validators": [
    {
      "host": "node15.root-shard.mainnet.rchain.coop",
      "grpc_port": 40401,
      "http_port": 443
    }
  ]
}
*/

  bool autoSelected;
  CoopValidators selectedNode;
  CoopNextToPropose nextToPropose;
  List<CoopValidators> validators;

  CoopNodes({
    this.autoSelected,
    this.selectedNode,
    this.nextToPropose,
    this.validators,
  });
  CoopNodes.fromJson(Map<String, dynamic> json) {
    autoSelected = json["autoSelected"];
    selectedNode = json["selectedNode"] != null
        ? CoopValidators.fromJson(json["selectedNode"])
        : null;
    nextToPropose = json["nextToPropose"] != null
        ? CoopNextToPropose.fromJson(json["nextToPropose"])
        : null;
    if (json["validators"] != null) {
      var v = json["validators"];
      var arr0 = List<CoopValidators>();
      v.forEach((v) {
        arr0.add(CoopValidators.fromJson(v));
      });
      validators = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["autoSelected"] = autoSelected;
    if (selectedNode != null) {
      data["selectedNode"] = selectedNode.toJson();
    }
    if (nextToPropose != null) {
      data["nextToPropose"] = nextToPropose.toJson();
    }
    if (validators != null) {
      var v = validators;
      var arr0 = List();
      v.forEach((v) {
        arr0.add(v.toJson());
      });
      data["validators"] = arr0;
    }
    return data;
  }
}
